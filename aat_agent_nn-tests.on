communication:
    sensor("contractSensor", "sensors.ContractSensor"). 	//nome do sensor e implementacao do sensor //Ideia - ler arquivo e gerar implementacao
    sensor("cvSensor", "sensors.CVSensor"). 	//nome do sensor e implementacao do sensor //Ideia - ler arquivo e gerar implementacao
	actuator("defaultActuator", "actuators.DefaultActuator").

beliefs:
    workingHours(2).    
    experience(softwareDeveloper).
    experience(teamManager).
    ageGroup(young).
    yearsOfExperience(softwareDeveloper, 4).
    yearsOfExperience(teamManager, 0).
    jobDistance(3).
    salary(12000) :- workingHours(8).
    has(car).
// Responsibilities given to the employer. The possible values are (a) QA, (b) Programmer, (c) Team Manager, or (d) Project Manager;    
desires:
    busyDailyHours(10).
    distanceFromWork(5). //wants to work close to its home
    job(programmer).

intentions:
    negotiateContract.

//defines the avg salary based on the sensors input
_nn:    

//implements AAT based on different context's information
_negotiation:    
//used to define the avg salary 
//    urgencia(tem(carro), 1).
//    urgencia(cargaHoraria(8), 10).
//    urgencia(cargo(programador), 10).
//    urgencia(cargo(gerenteDeEquipe), 9).

planner:
    plan(negotiateContract,[action(sendMessage(X,Y))],[_negotiation:urgency(X, Y, 10)],[beliefs:propose]). //fazer teste do actions com varias vars //verificar bug do posCond vazio

// considerar o tempo para desenvolver a NN


//! _negotiation urgency(has, car, 1) :- _neuralNetwork avgSalary(X) & beliefs jobDistance(X < 5).
//considerar a BR com dois níveis: nível 1: cada contexto resolve como retornar o verify; nível 2: nível simbólico.

! beliefs X :- communication contractSensor(X). // does not accept adding things with () - right side of bridge rule
! _nn X :- communication cvSensor(X).
// ! beliefs avgSalary(X) :- nn avgSalary(X).


// ! _negotiation urgency(salary, 7000, 10) :- _nn greater(84000) & beliefs jobDescription(programmer) & desires job(programmer).
// ! _negotiation urgency(salary, 12000, 10) :- _nn greater(144000) & beliefs jobDescription(programmer) & desires job(programmer).
// ! _negotiation urgency(salary, 7000, 10) :- beliefs jobDescription(programmer) & desires job(programmer). 


! _negotiation urgency(has, car, 1) :- beliefs jobDistance(X) & beliefs X < 5. //evitando usar comparacoes pois nao funcionam nessa versao


