communication:    
    sensor("metricsSensor", "sensors.MetricsSensor"). //requirements about accuracy, loss, learning rate and etc
    sensor("dataSensor", "sensors.DataSensor"). //data to be processed by the agent - for instance - info about malware (EMBER - 2018)
    sensor("nnSensor", "sensors.NNSensor"). //defines config to be passed - this sensor comunicates with nn    
	actuator("predictionResult", "actuators.PredictionResult"). //
    actuator("setOperation", "actuators.setOperation"). //defines the next operation and creates a new perception of these operations
    // these actuator could change the agent's internal state
    // this one adds the operation results into the communication context


beliefs:    
    time(available). // this data can be defined with bridge rules with custom context or via custom sensor (metrics)
    resources(available). 
    performance(low).
    

desires:

intentions:
    processData. //initial intention
    


//defines info about accuracy, loss and predictions
_nn:    



planner:
    plan(
        processData,
        [action(processNextMonth)],
        [_nn:available], // this means that the cnn achieved the minimum accuracy to process the next month
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(train))],
        [beliefs:resources(available), beliefs:time(available)], 
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(fineTuning))],
        [beliefs:resources(low), beliefs:time(available)], //if the agents beliefs that the resources are available and the agent has time available, the agent can execute a fine tuning
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(featureExtraction))],
        [beliefs:resources(low), beliefs:time(low)], //if the agents beliefs that the resources are available, the agent can execute a fine tuning
        [_]
    ).
//rules responsible to create new perceptions from different knowledge sources
! beliefs X :- communication metricsSensor(X).
! _nn execute(X,Y) :- communication setOperation(X) && communication dataSensor(Y). // executes an operation with the current available data


