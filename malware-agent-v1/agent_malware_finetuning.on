communication:    
    //sensor("machineSensor", "sensors.MachineSensor"). //info about the machine, such as cpu and mem usage - TODO: use this info to define epochs
    sensor("dataSensor", "sensors.DataSensor"). //data to be processed by the agent - for instance - info about malware (EMBER - 2018)
	//actuator("predictionResult", "actuators.PredictionResult"). //
    actuator("setOperation", "actuators.SetOperation"). //defines the next operation and creates a new perception of these operations
    // these actuator could change the agent's internal state
    // this one adds the operation results into the communication context


beliefs:    
    time(low). // this data can be defined with bridge rules with custom context or via custom sensor (metrics)
    resources(low). 
    
    

desires:

intentions:
    improveAccuracy. //initial intention

//provides information about nn performance    
_metrics:
    //history(100,0). // it will be added by BR
    //performance(low). < 60
    //performance(medium).  >= 60 < 83
    //performance(high).  >= 83 < 100    


//defines info about accuracy, loss and predictions
_nn:


planner:  
   
    plan(
        improveAccuracy,
        [action(setOperation(train))],
        [beliefs:resources(available), beliefs:time(available), _metrics:performance(low)], 
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(fineTuning))],
        [_metrics:performance(medium)], //if the agents beliefs that the resources are available and the agent has time available, the agent can execute a fine tuning
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(fineTuning))],
        [_metrics:performance(low)], //if the agents beliefs that the resources are available and the agent has time available, the agent can execute a fine tuning
        [_]
    ).
    plan(
        improveAccuracy,
        [action(setOperation(featureExtraction))],
        [_metrics:performance(high)], //if the agents beliefs that the resources are available, the agent can execute a fine tuning
        [_]
    ).

//rules responsible to create new perceptions from different knowledge sources
//! beliefs X :- communication machineSensor(X).

! _nn setOperation(X) :- communication sense(operation(X)). // executes an operation with the current available data

! _nn setParameters(X) :- _metrics findParameters(X).

! _nn execute(X) :- communication dataSensor(X). // executes an operation with the current available data

// we have to guarantee that this last BR executes after the nn's BR
! _metrics history_evaluations(X,Y) :- _nn history_evaluations(X, Y). //X = acc value and Y = loss value
//! _metrics history_trainings(X,Y) :- _nn history_trainings(X, Y). //X = acc value and Y = loss value

// when i use metrics after beliefs it does not remove _
